// Copyright 2019 OpenST Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ----------------------------------------------------------------------------
//
// http://www.simpletoken.org/
//
// ----------------------------------------------------------------------------

import shared from '../shared';
import Interacts from "../../interacts/Interacts";
import Utils from "../Utils";

import chai = require('chai');
import chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);
const { assert } = chai;

describe('Consensus::formCommittee()', async () => {

  it('Forms committee', async () => {

    const consensus = shared.origin.contracts.Consensus;
    const core = shared.origin.contracts.Core;
    const corePrecommit = await core.instance.methods.precommit().call();
    const axiom = await shared.origin.contracts.Axiom;

    assert.strictEqual(
        await consensus.instance.methods.proposals(corePrecommit).call(),
        Utils.NULL_ADDRESS,
        'Committee address must be null before the committee formation.',
      );

    const rawTx = await consensus.instance.methods.formCommittee(core.address);

    await Utils.sendTransaction(rawTx, {
      from: shared.origin.funder,
    });

    const proposal = await core.instance.methods.precommit().call();
    const committeeAddress = await consensus.instance.methods.proposals(proposal).call();

    const committeeProxyInstance = Interacts.getCommittee(committeeAddress);

    assert.strictEqual(
      await committeeProxyInstance.methods.proposal().call(),
      corePrecommit,
      'Incorrect proposal value',
    );

    assert.strictEqual(
      await committeeProxyInstance.methods.committeeSize().call(),
      await consensus.instance.methods.committeeSize().call(),
      'Incorrect committee size',
    );

    assert.strictEqual(
      consensus.address,
      await committeeProxyInstance.methods.consensus().call(),
      'Invalid consensus address',
    );
  });
});
